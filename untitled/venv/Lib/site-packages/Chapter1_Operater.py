# -*- coding:UTF-8 -*-

"""
compatible Python: 3.6.4

Author: Andrew YE

Date: 2018-01-25

Topic: Operator

Content:
    0. explanation
        a. operator 操作符
        b. operand 操作数,操作符右边的部分
        c. operation 操作
        d. Expression: An expression is nothing but a combination of operators, variables,
           constants and function calls that results in a value
    1. Math operator:
        a. **   Exponent 2 ** 3 = 8
        b. %    Modulus/remainder 22 % 8 = 6
        c. //   Integer division/floored quotient 22 // 8 = 2
        d. /    Division  22 / 8 = 2.75
                always return one floating-point type, if attempt to return integer type,
                use //
        e. *    Multiplication  3 * 5 = 15
        f. -    Subtraction  5 - 2 = 3
        g. +    Addition  2 + 2 = 4
        h. The order operation of math operator: ** > *, /, //, % > +, -
    2. assignment operator:
        a. =    assignment operator
        b. template_variable = 10  means the variable template_variable has the integer value 10 in it
        c. when a new value is assigned to variable, the old one is forgotten
    3. comparison operator:
        a. ==
        b. !=
        c. >
        d. >
        e. >=
        f. <=
    4. bitwise operator:
        a. &
        b. |
        c. ^
        d. ~
        e. <<
        f. >>
    5. logical operator:
        a. and   python 中的 and 从左到右计算表达式，若所有值均为真，则返回最后一个值，若存在假，返回第一个假值；
        b. or    or 也是从左到右计算表达式，返回第一个为真的值；数字 0 是假，其他为真； 字符 “” 是假，其他为真
        c. not
    6. member operator:
        a. in
        b. not in
    7. identity operator:
        a. is
        b. is not
    8. operator priority: from highest to lowest
        **
        ~ + - (按位翻转，一元加号，一元减号)
        * / % //
        + - (加法减法)
        >> <<
        &
        ^ |
        <= < > >=
        <> == !=
        = %= /= //= -= += *= **=
        is is not
        in not in
        not or and

"""

# example for logical operator
a = 10
b = 20
print(a and b)
# the result wil be 20 which comes from variable b


# example for binary data operation
c = 0b011011
d = 0b101101
e = c ^ d
print(bin(e))  # binary data
print(oct(e))  # octonary data
print(hex(e))  # hexadecimal data
# example for binary data operation

# example for distinguishing is and ==

# while value is in (-5, 256), below operation returns True
a1 = 5
b1 = 5
print(a1 is b1)
print(a1 == b1)
print(id(a1))
print(id(b1))
print(id(a1) == id(b1))

# while value exceeds (-5, 256), below operation returns False, fixed by Python during Python 3
a1 = 1000
b1 = 1000
print(a1 is b1)
print(a1 == b1)
print(id(a1))
print(id(b1))
print(id(a1) is id(b1))

# example for distinguishing is and ==





